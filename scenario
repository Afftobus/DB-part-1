
// ничего нет, создаем таблицу
CREATE TABLE company(company_id INTEGER, name TEXT);

// проверяем, что таблица есть
\d

// записываем модельные значения
INSERT INTO company(company_id, name) VALUES (1, 'Рога и копыта'), (2, 'Солнышко');

// проверяем, что они записались
SELECT * FROM company;

// intro generate_series
SELECT column_alias FROM generate_series(5, 15) AS table_alias(column_alias);

// используем generate_series для заполнения таблицы большой серией значений
INSERT INTO company SELECT company_id, 'random company name' FROM generate_series(3, 5000) AS g(company_id);

// проверяем, что записалось
SELECT * FROM company LIMIT 10;

// проверяем, что таблица не запрещает дубли id
INSERT INTO company(company_id, name) VALUES (5, 'random company');

// проверяем, что после предыдущего запроса там действительно дубли по id
SELECT * FROM company WHERE company_id = 5;

// таблица была прохая, удаляем ее
DROP TABLE company;

// проверяем, что таблица удалилась
\d

// создаем новую таблицу, правильную
CREATE TABLE company(company_id SERIAL PRIMARY KEY, name VARCHAR(200));

// заполняем новую таблицу модельными данными
INSERT INTO company(name) SELECT 'random company name'||company_id FROM generate_series(1,5000) as g(company_id);

// проверяем, что получилось
SELECT * FROM company LIMIT 5;

// intro order by
SELECT * FROM company ORDER BY company_id LIMIT 10;

// intro paging mechanics
SELECT * FROM company ORDER BY company_id DESC OFFSET 1000 LIMIT 10;
SELECT * FROM company WHERE company_id < 4500 ORDER BY company_id DESC OFFSET 1000 LIMIT 10;

// создаем вторую таблицу
CREATE TABLE vacancy(vacancy_id SERIAL PRIMARY KEY, company_id INTEGER REFERENCES company(company_id));

// добавляем к ней колонку с описанием
ALTER TABLE vacancy ADD COLUMN name TEXT;

// проверяем, что таблица добавилась
\d

// проверяем структуру новой таблицы
\d vacancy

// заполняем таблицу вакансий модельными данными
INSERT INTO vacancy(company_id, name) SELECT ROUND(1 + RANDOM()*4999), 'vacancy'||random() FROM generate_series(1,100000);

// проверяем, что данные там есть
SELECT * FROM vacancy LIMIT 10;

// intro enums
create type VACANCY_TYPE as ENUM ('OPEN', 'CLOSED', 'ANONIMOUS', 'ADV');
alter table vacancy add column vacancy_type VACANCY_TYPE;
update vacancy set vacancy_type = 'OPENqwe';
update vacancy set vacancy_type = 'OPEN';
SELECT * FROM vacancy LIMIT 10;	

// проверяем, что по некоторым условиям данных много и их надо как-то аггрегировать
SELECT * FROM vacancy WHERE company_id IN (1,2,13);

// пример аггрегации данных - подсчет количества вакансий по компании
SELECT count(vacancy_id), company_id FROM vacancy WHERE company_id IN (1,2,13) GROUP BY company_id;

// пример другой аггрегатной функции
SELECT array_agg(vacancy_id), company_id FROM vacancy WHERE company_id IN (1,2,13) group by company_id;

// intro join
SELECT vacancy.name, company.name FROM vacancy JOIN company ON (vacancy.company_id = company.company_id) LIMIT 10;

// заготовка для шутеечки
CREATE TABLE kozerog(qwe TEXT);

// проверяем, что в условие ON можно засунуть все что угодно
SELECT vacancy.name, company.name FROM vacancy JOIN company ON (EXISTS(SELECT 'luna' FROM kozerog)) limit 10;

// чистим за собой
DROP TABLE kozerog;

// intro using
SELECT vacancy.name, company.name FROM vacancy JOIN company USING (company_id) LIMIT 10;

// подготовка к intro left join-а - делаем компанию без вакансий
DELETE FROM vacancy WHERE company_id = 1;

// получение количества вакансий для компаний из списка: дубль 1
SELECT count(vacancy_id), company_id, company.name FROM vacancy JOIN company USING(company_id) WHERE company_id IN (1,2,3,4) GROUP BY company_id, company.name;

// вьюхи и матвьюхи
create view names as select company.name as company_name, vacancy.name from company join vacancy using (company_id);
	select * from names limit 10;
explain select * from names limit 10;

create materialized view names as select company.name as company_name, vacancy.name from company join vacancy using (company_id);
explain select * from mat_names;
refresh materialized view mat_names;

// получение количества вакансий для компаний из списка: дубль 2
SELECT count(vacancy_id), company_id, company.name FROM vacancy RIGHT JOIN company USING(company_id) WHERE company_id IN (1,2,3,4) GROUP BY company_id, company.name;

// еще одно intro - в БД могут прилететь компании с уже занятыми id
select max(company_id) from company;
insert into company(company_id, name) values(5001, 'blah-blah');
insert into company(company_id, name) values(5001, 'blah-blah') on conflict do nothing;
insert into company(company_id, name) values(5001, 'blah-blah2') on conflict (company_id) do update set name = 'blah-blah2';
select * from company where company_id = 5001;

// чистим за собой
\d
DROP TABLE company;
// облом - есть ссылка из другой таблицы
DROP TABLE company CASCADE;
\d
// удалилась только связь таблиц, таблица vacancy осталась
DROP TABLE vacancy;

//intro create as select
create table company AS SELECT id, 'long boring payload text' from generate_series(1,10000000) as g(id);
//планировщик должен проанализировать все изменения
vacuum analyze company;
//запрос, на который будем смотреть
select * from company where id = 5767;
//смотрим, что думает postgres об этом запросе
explain select * from company where id = 5767;
//и сравниваем это с реальным выполнением запроса
explain analyze select * from company where id = 5767;

// попробуем посмотреть на тот же запрос по индексу. для этого создадим индекс
create index on company(company_id);
vacuum analyze company;
// теперь сделаем запрос
explain analyze select * from company where id = 5767;
// чуть более сложный вариант использования индекса
explain analyze select * from company where id between 5767 and 6787 order by id desc;
// совсем сложный вариант, с bitmap heap scan-ом
explain analyze select * from company where id between 5767 and 6787 or id < 100 order by id desc;

// иногда индексы - это плохо. они могут занимать место на диске
// проверим место, занятое самой таблицей и индексами
select pg_relation_size('company');
select pg_indexes_size('company');

// индекс по id убирать не будем. вместо этого добавим поле с датой
alter table company add column reg_date timestamp;
// заполним эту таблицу так, чтобы дата регистрации росла вместе с id
update company set reg_date = '2001-01-12 12:58:58'::timestamp + company_id * interval '2 sec';
// Проверяем, что заполнилось
select * from company limit 5;
// добавляем процедуру бинарного поиска по дате

create function get_company_id_by_reg_date(target_time timestamp without time zone) returns integer
  stable
  SET enable_indexscan = 1
  language plpgsql
as
$$
DECLARE
  upper_time  TIMESTAMP;
  upper_id    INT;
  lower_time  TIMESTAMP;
  lower_id    INT;
  middle_time TIMESTAMP;
  middle_id   INT;
  iter int;
BEGIN
  SELECT reg_date, id FROM company ORDER BY id DESC LIMIT 1 INTO upper_time, upper_id;
  SELECT reg_date, id FROM company ORDER BY company_id ASC LIMIT 1 INTO lower_time, lower_id;

  iter = 1;
  WHILE (upper_id - lower_id > 1) AND iter <= 32 LOOP
    SELECT reg_date, id FROM company WHERE id <= lower_id + (upper_id - lower_id) / 2
    ORDER BY id DESC LIMIT 1
    INTO middle_time, middle_id;
    IF middle_time > target_time THEN
      SELECT middle_id, middle_time INTO upper_id, upper_time;
    ELSE
      SELECT middle_id, middle_time INTO lower_id, lower_time;
    END IF;
    iter := iter + 1;
  END LOOP;

  RETURN lower_id;
END
$$;

// проверяем, что работает хоть как-то
select * from get_company_id_by_reg_date('2001-05-15');


// фокусы---------------------------------------



CREATE TABLE users AS SELECT
    id, 
    'boring payload text'::TEXT AS payload
FROM GENERATE_SERIES(1, 1000010) AS g(id);

CREATE INDEX ON users(id);

VACUUM ANALYZE users;

explain analyze SELECT * FROM users ORDER BY id OFFSET 1000000 LIMIT 5;

explain analyze WITH ids AS (                                          
    SELECT id FROM users ORDER BY id OFFSET 1000000 LIMIT 5)
SELECT * FROM users
    WHERE id IN (SELECT id FROM ids) ORDER BY id;



CREATE TABLE users AS SELECT
     id,
     ROUND(RANDOM()*100000) AS last_name,
     ROUND(RANDOM()*100000) AS first_name,
     'long and boring payload text'::TEXT AS payload
FROM GENERATE_SERIES(1, 1000000) AS g(id);

CREATE INDEX ON users(id); 
CREATE INDEX ON users(last_name);
 
VACUUM ANALYZE users;

explain analyze SELECT * FROM users ORDER BY last_name, first_name LIMIT 5;

explain analyze WITH last_names AS (
    SELECT DISTINCT last_name FROM users ORDER BY last_name LIMIT 5),
candidates AS (
    SELECT * FROM users 
    WHERE last_name IN (SELECT last_name from last_names))
SELECT * FROM candidates ORDER BY last_name, first_name LIMIT 5;
